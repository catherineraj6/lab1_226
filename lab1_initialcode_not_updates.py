# -*- coding: utf-8 -*-
"""lab1_initialcode_not_updates

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10vXfDNmDeD5rtI9d2AUe2NH2gwyL1qtH
"""

from google.colab import userdata
vantage_api_key = userdata.get('vantage_api_key')



symbol = "GOOG"
# note that Formatted String Literal is used here
url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=GOOG&apikey=K21RLSKDTWDYNF9A"
symbol2 = "APPL"
# note that Formatted String Literal is used here
url2 = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=APPL&apikey=K21RLSKDTWDYNF9A"



!pip install requests

from google.colab import userdata

user_id = userdata.get('snowflake_userid')
password = userdata.get('snowflake_password')
account = userdata.get('snowflake_account')

!pip install snowflake-connector-python

import requests

r = requests.get(url)

data = r.json()

import requests

def return_last_90d_price(symbols):
    vantage_api_key = userdata.get('vantage_api_key')
    all_results = []  # Empty list to hold results for all symbols

    for symbol in symbols:
        url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={vantage_api_key}'
        r = requests.get(url)
        data = r.json()

        # Empty list to hold the 90 days of stock info for the current symbol
        results = []

        # Ensure that we only get the last 90 days
        time_series = data.get("Time Series (Daily)", {})
        dates = list(time_series.keys())[:90]  # Get the last 90 dates

        for d in dates:  # Iterate through the last 90 dates
            stock_info = time_series[d]
            stock_info["date"] = d  # Add the date to the stock info
            stock_info["symbol"] = symbol  # Add the stock symbol to the stock info
            results.append(stock_info)

        all_results.extend(results)  # Add the results for the current symbol to the overall list

    return all_results

# Example usage
symbols = ['GOOG', 'AAPL']  # List of symbols to fetch data for
stock_data = return_last_90d_price(symbols)

stock_data

def load_records(table, results):
  # to complete this, first create a cursor object via
  for r in results:
    open = r["1. open"]
    max = r["2. high"]
    min = r["3. low"]
    close = r["4. close"]
    volume = r["5. volume"]
    date = r['date']
    symbol = r['symbol']
    insert_sql = f"INSERT INTO {table} (open,max,min,close,voume,date,symbol) VALUES ({open}, {max}, {min}, {close}, {volume},{date},{symbol})"
    print(insert_sql)

load_records("dev.raw_data.stock_data",stock_data )

import snowflake.connector

def return_snowflake_conn():
    # Establish a connection to Snowflake
    conn = snowflake.connector.connect(
        user=user_id,
        password=password,
        account=account,  # Example: 'xyz12345.us-east-1'
        warehouse='compute_wh',
        database='dev'
    )
    # Create a cursor object
    return conn.cursor()

import requests
import snowflake.connector

def load_records(con, table, results):
    try:
        # Directly use the connection object without creating another cursor
        # Create or replace the target table with the updated schema
        con.execute(f"""
            CREATE OR REPLACE TABLE {table} (
                symbol VARCHAR(10),
                date DATE PRIMARY KEY,
                open FLOAT,
                close FLOAT,
                min FLOAT,
                max FLOAT,
                volume INT
            );
        """)

        # Insert records into the table
        for r in results:
            symbol = r["symbol"]  # Stock symbol
            date = r["date"]
            open_price = float(r["1. open"])
            close_price = float(r["4. close"])
            min_price = float(r["3. low"])
            max_price = float(r["2. high"])
            volume = int(r["5. volume"])

            # Create the SQL insert statement with the stock symbol
            insert_sql = f"""
                INSERT INTO {table} (symbol, date, open, close, min, max, volume)
                VALUES ('{symbol}', '{date}', {open_price}, {close_price}, {min_price}, {max_price}, {volume});
            """
            # Print or execute the SQL query
            print(insert_sql)  # For debugging purposes
            con.execute(insert_sql)  # Execute the query

        # Commit the transaction to save the records in the table
        con.execute("COMMIT;")

    except Exception as e:
        print(f"An error occurred: {e}")
        con.execute("ROLLBACK;")  # Rollback in case of error
        raise e  # Raise exception if any error occurs

# Example usage
con = return_snowflake_conn()  # Get Snowflake connection
table_name = "dev.raw_data.stock_prices"
stock_data = return_last_90d_price(['GOOG', 'AAPL'])  # Assuming this function returns valid stock data
load_records(con, table_name, stock_data)



